<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">


    <ImageView
        android:id="@+id/imageView2"
        android:layout_width="411dp"
        android:layout_height="381dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.0"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="1.0"
        app:srcCompat="@drawable/realroom" />

    <ImageView
        android:id="@+id/imageView3"
        android:layout_width="169dp"
        android:layout_height="192dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.933"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.03"
        app:srcCompat="@drawable/bed" />

    <ImageView
        android:id="@+id/imageView4"
        android:layout_width="196dp"
        android:layout_height="122dp"
        android:rotation="90"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.311"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.085"
        app:srcCompat="@drawable/redcouch" />

    <ImageView
        android:id="@+id/imageView6"
        android:layout_width="299dp"
        android:layout_height="134dp"
        android:layout_marginStart="-10dp"
        android:layout_marginEnd="25dp"
        android:rotation="270"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toStartOf="@+id/imageView3"
        app:layout_constraintHorizontal_bias="1.0"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.162"
        app:srcCompat="@drawable/telelvision" />

    <ImageView
        android:id="@+id/imageView7"
        android:layout_width="148dp"
        android:layout_height="161dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.314"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.35"
        app:srcCompat="@drawable/table" />

    <ImageView
        android:id="@+id/imageView8"
        android:layout_width="171dp"
        android:layout_height="57dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.962"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.37"
        app:srcCompat="@drawable/dresser" />

</androidx.constraintlayout.widget.ConstraintLayout>

<!--    package com.example.roomscape-->

<!--    import android.app.Activity-->
<!--    import android.graphics.Matrix-->
<!--    import android.graphics.PointF-->
<!--    import android.os.Bundle-->
<!--    import android.util.FloatMath-->
<!--    import android.util.Log-->
<!--    import android.view.MotionEvent-->
<!--    import android.view.View-->
<!--    import android.view.View.OnTouchListener-->
<!--    import android.widget.ImageView-->
<!--    import java.lang.Math.sqrt-->


<!--    class RotateZoomMove : Activity(), OnTouchListener {-->
<!--    // These matrices will be used to move and zoom image-->
<!--    var matrix = Matrix()-->
<!--    var savedMatrix = Matrix()-->
<!--    var mode = NONE-->

<!--    // Remember some things for zooming-->
<!--    var start = PointF()-->
<!--    var mid = PointF()-->
<!--    var oldDist = 1f-->
<!--    public override fun onCreate(savedInstanceState: Bundle?) {-->
<!--    super.onCreate(savedInstanceState)-->
<!--    setContentView(R.layout.activity_main)-->
<!--    val view = findViewById<View>(R.id.imageView2) as ImageView-->
<!--view.setOnTouchListener(this)-->
<!--}-->

<!--override fun onTouch(v: View, event: MotionEvent): Boolean {-->
<!--val view = v as ImageView-->
<!--val rotation = 25-->
<!--// Dump touch event to log-->
<!--dumpEvent(event)-->
<!--when (event.action and MotionEvent.ACTION_MASK) {-->
<!--MotionEvent.ACTION_DOWN -> {-->
<!--savedMatrix.set(matrix)-->
<!--start[event.x] = event.y-->
<!--Log.d(TAG, "mode=DRAG")-->
<!--mode = DRAG-->
<!--}-->
<!--MotionEvent.ACTION_POINTER_DOWN -> {-->
<!--oldDist = spacing(event).toFloat()-->
<!--Log.d(TAG, "oldDist=$oldDist")-->
<!--if (oldDist > 10f) {-->
<!--savedMatrix.set(matrix)-->
<!--midPoint(mid, event)-->
<!--mode = ZOOM-->
<!--Log.d(TAG, "mode=ZOOM")-->
<!--}-->
<!--}-->
<!--MotionEvent.ACTION_UP -> {-->
<!--mode = NONE-->
<!--Log.d(TAG, "mode=NONE")-->
<!--savedMatrix.set(matrix)-->
<!--matrix.postRotate(90f)-->
<!--}-->
<!--MotionEvent.ACTION_MOVE -> if (mode == DRAG) {-->
<!--// ...-->
<!--matrix.set(savedMatrix)-->
<!--matrix.postTranslate(-->
<!--event.x - start.x,-->
<!--event.y - start.y-->
<!--)-->
<!--} else if (mode == ZOOM) {-->
<!--val newDist = spacing(event)-->
<!--Log.d(TAG, "newDist=$newDist")-->
<!--if (newDist > 10f) {-->
<!--matrix.set(savedMatrix)-->
<!--val scale = (newDist / oldDist).toFloat()-->
<!--matrix.postScale(scale, scale, mid.x, mid.y)-->
<!--}-->
<!--}-->
<!--}-->
<!--view.imageMatrix = matrix-->
<!--return true // indicate event was handled-->
<!--}-->

<!--/** Show an event in the LogCat view, for debugging  */-->
<!--private fun dumpEvent(event: MotionEvent) {-->
<!--val names = arrayOf(-->
<!--"DOWN", "UP", "MOVE", "CANCEL", "OUTSIDE",-->
<!--"POINTER_DOWN", "POINTER_UP", "7?", "8?", "9?"-->
<!--)-->
<!--val sb = StringBuilder()-->
<!--val action = event.action-->
<!--val actionCode = action and MotionEvent.ACTION_MASK-->
<!--sb.append("event ACTION_").append(names[actionCode])-->
<!--if (actionCode == MotionEvent.ACTION_POINTER_DOWN-->
<!--|| actionCode == MotionEvent.ACTION_POINTER_UP-->
<!--) {-->
<!--sb.append("(pid ").append(-->
<!--action shr MotionEvent.ACTION_POINTER_ID_SHIFT-->
<!--)-->
<!--sb.append(")")-->
<!--}-->
<!--sb.append("[")-->
<!--for (i in 0 until event.pointerCount) {-->
<!--sb.append("#").append(i)-->
<!--sb.append("(pid ").append(event.getPointerId(i))-->
<!--sb.append(")=").append(event.getX(i).toInt())-->
<!--sb.append(",").append(event.getY(i).toInt())-->
<!--if (i + 1 < event.pointerCount) sb.append(";")-->
<!--}-->
<!--sb.append("]")-->
<!--Log.d(TAG, sb.toString())-->
<!--}-->

<!--/** Determine the space between the first two fingers  */-->
<!--private fun spacing(event: MotionEvent): Double {-->
<!--val x = event.getX(0) - event.getX(1)-->
<!--val y = event.getY(0) - event.getY(1)-->
<!--return sqrt((x * x + y * y).toDouble())-->
<!--}-->

<!--/** Calculate the mid point of the first two fingers  */-->
<!--private fun midPoint(point: PointF, event: MotionEvent) {-->
<!--val x = event.getX(0) + event.getX(1)-->
<!--val y = event.getY(0) + event.getY(1)-->
<!--point[x / 2] = y / 2-->
<!--}-->

<!--companion object {-->
<!--private const val TAG = "Touch"-->

<!--// We can be in one of these 3 states-->
<!--const val NONE = 0-->
<!--const val DRAG = 1-->
<!--const val ZOOM = 2-->
<!--}-->
<!--}-->